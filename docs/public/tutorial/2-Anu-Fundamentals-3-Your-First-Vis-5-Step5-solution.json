{"/lesson.js":"import * as anu from \"@jpmorganchase/anu\";\nimport penguins from \"./penguins.json\" assert {type: 'json'}\nimport { extent, scaleLinear, scaleOrdinal} from \"d3\";\nimport { Vector3, ExecuteCodeAction, ActionManager} from \"@babylonjs/core\";\n\nexport default (scene) => {\n    \n    let cot = anu.bind('cot');\n\n    let marks = cot.bind('sphere', {segments: 16}, penguins);\n\n    let scaleX = scaleLinear().domain(extent([...penguins.map(item => item[\"Beak Length (mm)\"])])).range([-5,5])\n\n    let scaleY  = scaleLinear().domain(extent([...penguins.map(item => item[\"Flipper Length (mm)\"])])).range([-5,5])\n\n    let scaleZ = scaleLinear().domain(extent([...penguins.map(item => item[\"Beak Depth (mm)\"])])).range([-5,5])\n\n    let scaleSize = scaleLinear().domain(extent([...penguins.map(item => item[\"Body Mass (g)\"])])).range([0.1, 0.5])\n\n    let materials = anu.ordinalChromatic('d310').toStandardMaterial();\n    let colorScale = scaleOrdinal(materials)\n\n    marks.positionX((d) => scaleX(d[\"Beak Length (mm)\"]))\n         .positionY((d) => scaleY(d[\"Flipper Length (mm)\"]))\n         .positionZ((d) => scaleZ(d[\"Beak Depth (mm)\"]))\n         .scaling((d) => {\n            let scaleFactor = scaleSize(d[\"Body Mass (g)\"])\n            return new Vector3(scaleFactor,scaleFactor,scaleFactor)\n         })\n         .material((d) => colorScale(d[\"Species\"]))\n\n\tlet text = anu.create(\"planeText\", \"hover-label\", {text: \"blank\"})\n    text.isVisible = false; //Create our text mesh and set it to be invisible\n\n    let pointOverAction = (d,n,i) => new ExecuteCodeAction(\n                            ActionManager.OnPointerOverTrigger,\n                            () => {\n                                n.renderOutline = true;\n                                n.outlineWidth = 0.2;\n\n                                //Update text text, position, and set to be visible\n                                text.updatePlaneText({text: `${d[\"Species\"]}: ${d[\"Island\"]}`})\n                                text.position = n.position.clone().addInPlaceFromFloats(0.5, 0.5, 0)\n                                text.isVisible = true;\n                            }\n                        );\n\n    let pointOutAction = (d,n,i) => new ExecuteCodeAction(\n                            ActionManager.OnPointerOutTrigger,\n                            () => {\n                                n.renderOutline = false;\n                                text.isVisible = false;\n                            }\n                        );\n\n\tmarks.action((d,n,i) => pointOverAction(d,n,i))\n         .action((d,n,i) => pointOutAction(d,n,i))\n \n    let axes = anu.createAxes(\"myAxes\", scene, {\n        scale: {x: scaleX, y: scaleX, z: scaleZ},\n        parent: cot\n    })\n\n\tlet labelX = cot.bind(\"planeText\", {text: \"Beak Length (mm)\"})\n                    .position(new Vector3(0, -6, -5))\n\n    let labelY = cot.bind(\"planeText\", {text: \"Flipper Length (mm)\"})\n        .position(new Vector3(-6, 0, -5))\n        .rotationZ(90 * (3.14/180))\n\n    let labelZ = cot.bind(\"planeText\", {text: \"Flipper Depth (mm)\"})\n        .position(new Vector3(5, -6, 0))\n        .rotationY(-90 * (3.14/180))\n\n    return scene\n}"}